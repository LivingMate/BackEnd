// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String               @id @default(cuid())
  userName        String               @unique
  userColor       String
  email           String               @unique
  sex             Boolean
  age             Int
  createdAt       DateTime             @default(now())
  group           Group                @relation(fields: [groupId], references: [id])
  groupId         String
  fcmToken        String?
  Feed            Feed[]
  SingleSender    NotificationSingle[] @relation("sender")
  SingleReciever  NotificationSingle[] @relation("reciever")
  MultiSender     NotificationMulti[]  @relation("sender")
  MultiReciever   NotificationMulti[]  @relation("reciever")
  CalendarUser    Calendar[]           @relation("user")
  // CalendarParticipant Calendar[]           @relation("participant")
  AvailableDay    AvailableDay[]
  UserSpendings   UserSpendings[]
  AdjustmentMinus Adjustment[]         @relation("minusUser")
  AdjustmentPlus  Adjustment[]         @relation("plusUser")
  Participant     Participant[]
}

model Group {
  id                 String               @id @default(cuid())
  groupName          String               @db.VarChar(255)
  groupOwner         String
  groupCode          String?
  groupSpending      Float
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  User               User[]
  Feed               Feed[]
  NotificationSingle NotificationSingle[]
  NotificationMulti  NotificationMulti[]
  Calendar           Calendar[]
  ExistCalendar      ExistCalendar[]
  Participant        Participant[]
  Schedule           Schedule[]
  ExistSchedule      ExistSchedule[]
  UserSpendings      UserSpendings[]
  Adjustment         Adjustment[]
  SubCategory        SubCategory[]
}

model Feed {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  text      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  pin       Boolean  @default(false)
}

model NotificationSingle {
  id         Int      @id
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    String
  text       String   @db.LongText
  createdAt  DateTime @default(now())
  sender     User?    @relation(fields: [senderId], references: [id], name: "sender")
  senderId   String?
  reciever   User?    @relation(fields: [recieverId], references: [id], name: "reciever")
  recieverId String?
}

model NotificationMulti {
  id         Int      @id
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    String
  text       String   @db.LongText
  createdAt  DateTime @default(now())
  sender     User?    @relation(fields: [senderId], references: [id], name: "sender")
  senderId   String?
  reciever   User?    @relation(fields: [recieverId], references: [id], name: "reciever") // 배열로 받아야 함
  recieverId String?
}

// -----------일정 등록 부분
model Calendar {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id], name: "user")
  userId      String
  group       Group         @relation(fields: [groupId], references: [id])
  groupId     String
  title       String        @db.VarChar(255)
  // participant   User     @relation(fields: [participantId], references: [id], name: "participant")
  // participantId String
  dateStart   DateTime      @db.Date
  dateEnd     DateTime      @db.Date
  memo        String        @db.Text
  term        Int //주기를 매일:0 매주:1 매달:2 매년:3 이런식으로 받는건? // 주기가 있다면 서비스로 해결 따로 db 안필요함
  Participant Participant[]
}

model ExistCalendar {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  term      Int
  title     String
  dateStart DateTime @db.Date
}

model Participant {
  id         Int      @id @default(autoincrement())
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  calendar   Calendar @relation(fields: [calendarId], references: [id])
  calendarId Int
}

// -----------일정조율 부분
model Schedule {
  id            Int             @id @default(autoincrement())
  group         Group           @relation(fields: [groupId], references: [id])
  groupId       String
  title         String
  used          Boolean
  ExistSchedule ExistSchedule[]
  AvailableDay  AvailableDay[]
}

model ExistSchedule {
  id           Int            @id @default(autoincrement())
  group        Group          @relation(fields: [groupId], references: [id])
  groupId      String
  schedule     Schedule       @relation(fields: [scheduleId], references: [id])
  scheduleId   Int
  optionDate   String
  optionTime   String
  AvailableDay AvailableDay[]
}

model AvailableDay {
  id              Int           @id @default(autoincrement())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  schedule        Schedule      @relation(fields: [scheduleId], references: [id])
  scheduleId      Int
  ExistSchedule   ExistSchedule @relation(fields: [existScheduleId], references: [id])
  existScheduleId Int
}

// ------------- 정산부분
model UserSpendings {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  group         Group       @relation(fields: [groupId], references: [id])
  groupId       String
  spendings     Float       @default(0)
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    Int
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int
  createdAt     DateTime    @default(now())
  spendingName  String
  isDone        Boolean     @default(false)
}

model Adjustment {
  id          Int      @id @default(autoincrement())
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String
  minusUser   User?    @relation(fields: [minusUserId], references: [id], name: "minusUser")
  minusUserId String?
  plusUser    User?    @relation(fields: [plusUserId], references: [id], name: "plusUser")
  plusUserId  String?
  change      Int
  createdAt   DateTime @default(now())
}

model Category {
  // 가계부 카테고리별 금액 확인할때 필요할것같아서 만들어봤음
  id          Int             @id @default(autoincrement())
  name        String
  spendings   UserSpendings[]
  SubCategory SubCategory[]

  @@unique([name])
}

model SubCategory {
  // 필요성을 잘 모르겠지만,, 혹시 몰라서 만들어봄
  id         Int             @id @default(autoincrement())
  group      Group           @relation(fields: [groupId], references: [id])
  groupId    String
  category   Category        @relation(fields: [categoryId], references: [id])
  categoryId Int
  name       String
  spendings  UserSpendings[]

  @@unique([name])
}
