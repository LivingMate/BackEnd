// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id
  userName        String          @unique
  userColor       String
  email           String          @unique
  sex             Boolean
  age             Int
  createdAt       DateTime        @default(now())
  group           Group           @relation(fields: [groupId], references: [id])
  groupId         String
  fcmToken        String?
  Feed            Feed[]
  NotiSender      Notification[]  @relation("sender")
  NotiReciever    Notification[]  @relation("reciever")
  CalendarUser    Calendar[]      @relation("user")
  // CalendarParticipant Calendar[]           @relation("participant")
  UserSpendings   UserSpendings[]
  AdjustmentMinus Adjustment[]    @relation("minusUser")
  AdjustmentPlus  Adjustment[]    @relation("plusUser")
  Participant     Participant[]
}

model Group {
  id            String          @id
  groupName     String          @db.VarChar(255)
  groupOwner    String
  groupCode     String?
  groupSpending Float
  createdAt     DateTime        @default(now())
  User          User[]
  Feed          Feed[]
  Notification  Notification[]
  Calendar      Calendar[]
  ExistCalendar ExistCalendar[]
  Participant   Participant[]
  Schedule      Schedule[]
  Scheduling    Scheduling[]
  UserSpendings UserSpendings[]
  Adjustment    Adjustment[]
  SubCategory   SubCategory[]
}

model Feed {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  content   String   @default("")
  createdAt DateTime @default(now())
  pin       Boolean  @default(false)
}

model Notification {
  id         Int      @id @default(autoincrement())
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    String
  text       String   @db.LongText
  createdAt  DateTime @default(now())
  sender     User?    @relation(fields: [senderId], references: [id], name: "sender")
  senderId   String?
  reciever   User?    @relation(fields: [recieverId], references: [id], name: "reciever")
  recieverId String?
  delete     Boolean  @default(false)
}

// -----------일정 등록 부분
model Calendar {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id], name: "user")
  userId      String
  group       Group         @relation(fields: [groupId], references: [id])
  groupId     String
  title       String        @db.VarChar(255)
  dateStart   DateTime
  dateEnd     DateTime
  memo        String        @db.Text
  term        Int
  Participant Participant[]
}

model ExistCalendar {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  term      Int
  title     String
  dateStart DateTime @db.Date
}

model Participant {
  id         Int      @id @default(autoincrement())
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  calendar   Calendar @relation(fields: [calendarId], references: [id])
  calendarId Int
}

// -----------일정조율 부분
model Schedule {
  id         Int          @id @default(autoincrement())
  group      Group        @relation(fields: [groupId], references: [id])
  groupId    String
  title      String
  dates      String
  startTime  String
  endTime    String
  Scheduling Scheduling[]
}

model Scheduling {
  id         Int      @id @default(autoincrement())
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int
  date       String
  time       String
  selectedBy String
}

// ------------- 정산부분
model UserSpendings {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  group         Group       @relation(fields: [groupId], references: [id])
  groupId       String
  spendings     Float       @default(0)
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    Int
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int
  createdAt     DateTime    @default(now())
  spendingName  String
  isDone        Boolean     @default(false)
}

model Adjustment {
  id          Int      @id @default(autoincrement())
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String
  minusUser   User?    @relation(fields: [minusUserId], references: [id], name: "minusUser")
  minusUserId String?
  plusUser    User?    @relation(fields: [plusUserId], references: [id], name: "plusUser")
  plusUserId  String?
  change      Int
  createdAt   DateTime @default(now())
}

model Category {
  id          Int             @id @default(autoincrement())
  name        String
  spendings   UserSpendings[]
  SubCategory SubCategory[]

  @@unique([name])
}

model SubCategory {
  id         Int             @id @default(autoincrement())
  group      Group           @relation(fields: [groupId], references: [id])
  groupId    String
  category   Category        @relation(fields: [categoryId], references: [id])
  categoryId Int
  name       String
  spendings  UserSpendings[]

  @@unique([name])
}
